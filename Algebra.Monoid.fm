
// A Monoid is an associative Magma with identity

import Logic
import Algebra.Operation
import Algebra.Semigroup

// ========================================================
// =                     Definition                       =
// ========================================================

T Monoid {A : Type, s : -Setoid(A)}
| monoid
  { f           : Op2(A)
  , e           : A
  , associative : Associative(A,s,f)
  , identity    : Identity(A,s,f,e)
  }

// ========================================================
// =                      Accessors                       =
// ========================================================

monoid.f : {A : Type , s : -Setoid(A) , case m : Monoid(A,s)} -> Op2(A)
| monoid => m.f

monoid.e : {A : Type , s : -Setoid(A) , case m : Monoid(A,s)} -> A
| monoid => m.e

monoid.associative :
  { A : Type
  , s : -Setoid(A)
  , case m : Monoid(A,s)
  } -> Associative(A,s,monoid.f(A,s,m))
| monoid => m.associative

monoid.identity :
  { A : Type
  , s : -Setoid(A)
  , case m : Monoid(A,s)
  } -> Identity(A,s,monoid.f(A,s,m), monoid.e(A,s,m))
| monoid => m.identity

// ========================================================
// =                     Conversions                      =
// ========================================================

//semigroup_to_monoid :
//  {~A : Type
//  , s : -Setoid(A)
//  , case m : Semigroup(A,s)
//  , e : A
//  , identity : Identity(A,s,semigroup.f(A,s,m),e)
//  } -> Monoid(A,s)
//| semigroup => monoid(~A,~s^,m.f,e,m.associative,identity)

// All Monoids are Semigroups
monoid_to_semigroup :
  {~A : Type
  , s : -Setoid(A)
  , case m : Monoid(A,s)
  } -> Semigroup(A,s)
| monoid => semigroup(~A,~s^,m.f, m.associative)

// ========================================================
// =                     Extensions                       =
// ========================================================

T AbelianMonoid {A : Type, s : -Setoid(A)}
| abelian_monoid
  { f           : Op2(A)
  , e           : A
  , associative : Associative(A,s,f)
  , identity    : Identity(A,s,f,e)
  , commutative : Commutative(A,s,f)
  }

T IdempotentMonoid {A : Type, s : -Setoid(A)}
| idempotent_monoid
  { f           : A -> A -> A
  , e           : A
  , associative : Associative(A,s,f)
  , identity    : Identity(A,s,f,e)
  , idempotent  : Idempotent(A,s,f)
  }

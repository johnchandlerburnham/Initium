
// Logic contains a variety of useful non-builtin types

// ========================================================
// =                    Data Types                        =
// ========================================================

// The uninhabited type, initial object in the FORM category
T Empty

// The terminal object in the FORM category
T Unit
| unit

// Logical conjunction
T And {A : Type, B : Type}
| both {left : A, right : B}

// Logical disjunction
T Or {A : Type, B: Type}
| left  { value : A }
| right { value : B }

// If and only if: p <-> q
Iff : {A : Type, B : Type} -> Type
  And(A -> B, B -> A)

// Propositional equality
T Equal {A : Type, a : -A} (b : -A)
| refl (a)

// ========================================================
// =      Data Type Specific Utilities and Theorems       =
// ========================================================

// Empty
// ---------------------------------------------------------

// From falsehood, everything follows
absurd : {e : Empty, ~P : Type} -> P
  case/Empty e
  : P

// A false proposition returns a falsehood
Not : {P : Type} -> Type
  {x : P} -> Empty

// Unit
// ---------------------------------------------------------

to_Unit : {~A, x : A} -> Unit
  unit

from_Unit : {~A, x : A, u : Unit} -> A
  x

// And
// ---------------------------------------------------------

and.left : {~A, ~B, case and : And(A, B)} -> A
| both => and.left

and.right : {~A, ~B, case and : And(A, B)} -> B
| both => and.right

// (p && q) <-> (q && p)
And.commutation : {~A : Type, ~B : Type , case c : And(A,B)} -> And(B,A)
| both => both(~B,~A,c.right,c.left)

// p -> (p && p)
And.tautology : {~A : Type, a : !A} -> And(!A,!A)
  dup a = a
  both(~!A,~!A, #a, #a)

// (p && q) && r <-> p && (q && r)
And.association :
  { ~A : Type
  , ~B : Type
  , ~C : Type
  } -> Iff(And(A,And(B,C)), And(And(A,B), C))
  let L = And(A,And(B,C))
  let R = And(And(A,B), C)
  let l = {c} case/And c
    | both => case/And c.right as cr
      | both => both(~And(A,B), ~C, both(~A,~B, c.left, cr.left), cr.right)
      : R
    : R
  let r = {c} case/And c
    | both => case/And c.left as cl
      | both => both(~A, ~And(B,C), cl.left, both(~B,~C, cl.right, c.right))
      : L
    : L
  both(~(L -> R),~(R -> L),l,r)

// Or
// ---------------------------------------------------------

// p || q -> q || p
Or.commutation : {~A : Type, ~B : Type , case c : Or(A,B)} -> Or(B,A)
| left  => right(~B,~A, c.value)
| right => left(~B,~A, c.value)

// p -> p || q
Or.tautology_left : {~A : Type, ~B : Type, a : A} -> Or(A,B)
  left(~A,~B, a)

// p -> q || p
Or.tautology_right : {~A : Type, ~B : Type, a : A} -> Or(B,A)
  right(~B,~A, a)

// (p || q) || r <-> p || (q || r)
Or.association : 
  { ~A : Type
  , ~B : Type
  , ~C : Type
  } -> Iff(Or(A,Or(B,C)), Or(Or(A,B), C))
  let L = Or(A,Or(B,C))
  let R = Or(Or(A,B), C)
  let l = {c} case/Or c
    | left => left(~Or(A,B), ~C, left(~A,~B,c.value))
    | right => case/Or c.value as k
      | left  => left(~Or(A,B), ~C, right(~A,~B, k.value))
      | right => right(~Or(A,B), ~C, k.value)
      : R
    : R
  let r = {c} case/Or c
    | left => case/Or c.value as k
      | left  => left(~A, ~Or(B,C), k.value)
      | right => right(~A, ~Or(B,C), left(~B,~C, k.value))
      : L
    | right => right(~A, ~Or(B,C), right(~B,~C, c.value))
    : L
  both(~(L -> R),~(R -> L),l,r)

// (p || q) && (p || r) <-> p || (q && r)
Or.distribution :
  { ~A : Type
  , ~B : Type
  , ~C : Type
  } -> Iff(And(Or(-A,B), Or(-A,C)), Or(-A,And(B,C)))
  let L = And(Or(-A,B), Or(-A,C))
  let R = Or(-A,And(B,C))
  let l = {c} case/And c | both =>
      case/Or c.left as x
      | left => left(~-A,~And(B,C), x.value)
      | right => case/Or c.right as y
        | left  => left(~-A, ~And(B,C), y.value)
        | right => right(~-A, ~And(B,C), both(~B, ~C, x.value, y.value))
        : R
      : R
    : R
  let r = {c} case/Or c
    | left =>
        both(~Or(-A,B), ~Or(-A,C), left(~-A,~B, c.value), left(~-A,~C, c.value))
    | right => case/And c.value as x
      | both =>
        let L2 = Or(-A,B)
        let R2 = Or(-A,C)
        let l2 = right(~-A, ~B, x.left)
        let r2 = right(~-A, ~C, x.right)
        both(~L2,~R2,l2,r2)
      :  L
    : L
  both(~(L -> R),~(R -> L),l,r)

// (!p || q) && (!p || r) <-> p || (q && r)
Or.distribution.box :
  { ~A : Type
  , ~B : Type
  , ~C : Type
  } -> Iff(And(Or(!A,B), Or(!A,C)), Or(!A,And(B,C)))
  let L = And(Or(!A,B), Or(!A,C))
  let R = Or(!A,And(B,C))
  let l = {c} case/And c | both =>
      case/Or c.left as x
      | left => left(~!A,~And(B,C), x.value)
      | right => case/Or c.right as y
        | left  => left(~!A, ~And(B,C), y.value)
        | right => right(~!A, ~And(B,C), both(~B, ~C, x.value, y.value))
        : R
      : R
    : R
  let r = {c} case/Or c
    | left => dup value = c.value
        both(~Or(!A,B), ~Or(!A,C), left(~!A,~B, #value), left(~!A,~C, #value))
    | right => case/And c.value as x
      | both =>
        let L2 = Or(!A,B)
        let R2 = Or(!A,C)
        let l2 = right(~!A, ~B, x.left)
        let r2 = right(~!A, ~C, x.right)
        both(~L2,~R2,l2,r2)
      :  L
    : L
  both(~(L -> R),~(R -> L),l,r)

// Iff
// ---------------------------------------------------------

//iff.Reflexive : {A : Type} -> Reflexive(Type, Iff)
  //{~A} both(~(A -> A), ~(A -> A), id(~A), id(~A))

//iff.Symmetric : {A : Type} -> Symmetric(Type,Iff)
  //{~A,~B,~f} case/And f
    //| both => both(~(B -> A),~(A -> B), f.right, f.left)
    //: Iff(B,A)

//iff.Transitive : Transitive(Type, Iff)
  //{~A,~B,~C,~f,~g} case/And f | both => case/And g | both =>
    //both(~(A -> C), ~(C -> A), {x} g.left(f.left(x)), {x} f.right(g.right(x)))
      //:Iff(A,C)
    //: Iff(A,C)

// Equal
// ---------------------------------------------------------

// Substitution of an equality
rewrite :
  { ~A : Type
  , ~a : -A
  , ~b : -A
  , e : Equal(A, a, b)
  , ~P : A -> Type
  , x : P(+a)
  } -> P(+b)
  case/Equal e
  | refl => x
  : P(+e.b)

// Symmetry of equality
sym : {~A : Type, ~a : -A, ~b : -A, e : Equal(A, a, b)} -> Equal(A, b, a)
  case/Equal e
  | refl => refl(~A, ~a)
  : Equal(A, e.b, a)

// Congruence of equality
cong :
  { ~A : Type
  , ~B : Type
  , ~a : -A
  , ~b : -A
  , ~f : -(A -> B)
  , e : Equal(A, a, b)
  } -> Equal(B, %(+f)(+a), %(+f)(+b))
  case/Equal e
  | refl => refl(~B, ~%(+f)(+a))
  : Equal(B, %(+f)(+a), %(+f)(+e.b))

// Transitivity of equality
trans :
  { ~A
  , ~a : -A
  , ~b : -A
  , ~c : -A
  , ab : Equal(A, a, b)
  , bc : Equal(A, b, c)
  } -> Equal(A, a, c)
  case/Equal bc
  | refl => ab
  : Equal(A, a, bc.b)

// ========================================================
// =                  General Theorems                    =
// ========================================================

// (p -> q) && p |- q
modus_ponens : {~P : Type, ~Q : Type, implies : P -> Q, p : P} -> Q
  implies(p)

// ((p -> q) && ~q) |- ~p
modus_tollens : { P : Type, Q : Type, implies : P -> Q, nb : Not(Q) } -> Not(P)
  {x} nb(implies(x))

// (p -> q) && (q -> r) |- (p -> r)
hypothetical_syllogism :
  {~P : Type, ~Q : Type, ~R : Type
  , f : P -> Q
  , g : Q -> R
  , x : P
  } -> R
  g(f(x))

// Modus tollendo ponens: ((p || q) && ~p) |- q
disjunctive_syllogism :
  { ~P : Type, ~Q : Type
  , case c : Or(P,Q)
  , nP : Not(P)
  } -> Q
| left  => absurd(nP(c.value), ~Q)
| right => c.value

// (p -> q) && (r -> s) && (p || r) |- (q || s)
constructive_dilemma :
  {~P : Type, ~Q : Type, ~R : Type, ~S : Type
  , f : P -> Q
  , g : R -> S
  , case c : Or(P,R)
  } -> Or(Q,S)
| left  => left(~Q, ~S, f(c.value))
| right => right(~Q, ~S, g(c.value))

// (p -> q) && (r -> s) && (~q || ~s) |- (~p || ~r)
destructive_dilemma :
  {~P : Type, ~Q : Type, ~R : Type, ~S : Type
  , f : P -> Q
  , g : R -> S
  , case c : Or(Not(Q),Not(S))
  } -> Or(Not(P),Not(R))
| left  =>  left(~Not(P), ~Not(R), {p} c.value(f(p)))
| right => right(~Not(P), ~Not(R), {r} c.value(g(r)))

// (p -> q) && (r -> s) && (p || ~s) |- (q || ~r)
bidirectional_dilemma :
  {~P : Type, ~Q : Type, ~R : Type, ~S : Type
  , f : P -> Q
  , g : R -> S
  , case c : Or(P,Not(S))
  } -> Or(Q,Not(R))
| left  =>  left(~Q, ~Not(R), f(c.value))
| right => right(~Q, ~Not(R), {r} c.value(g(r)))

// (p && q) |- p
simplification : {~P : Type, ~Q : Type , case c : And(P,Q)} -> P
| both => c.left

// p,q |- (p && q)
conjunction : {~P : Type, ~Q : Type, p : P , q : Q} -> And(P,Q)
  both(~P,~Q,p,q)

// p |- (p || q)
logic.addition : {~P : Type, ~Q : Type, p : P} -> Or(P,Q)
  left(~P,~Q,p)

// (p -> q) && (p -> r) |- (p -> (q && r))
logic.composition :
  {~P : Type, ~Q : Type, ~R : Type
  , f : {:-P} -> Q
  , g : {:-P} -> R
  , p : -P
  } -> And(Q,R)
  both(~Q,~R,f(p),g(p))

// (p -> q) && (p -> r) |- (p -> (q && r))
logic.composition.box :
  {~P : Type, ~Q : Type, ~R : Type
  , f : !(P -> Q)
  , g : !(P -> R)
  , p : !P
  } -> And(!Q,!R)
  dup p = p
  dup f = f
  dup g = g
  both(~!Q,~!R,#f(p),#g(p))

// (p -> q) |- (~q -> ~p)
logic.transposition :
  { ~P : Type, ~Q : Type
  , f : P -> Q
  } -> Not(Q) -> Not(P)
  {nq, p} nq(f(p))

// p -> ~(~p)
double_negation :
  { ~P : Type
  , p : P
  } -> Not(Not(P))
  {np} np(p)

NonContradiction : {A : Type, x : A, nx : Not(A)} -> Empty
  nx(x)

// ~p || ~q -> ~(p && q)
logic.demorgan1 :
  {~P : Type, ~Q : Type
  , case c : Or(Not(P), Not(Q))
  } -> Not(And(P,Q))
| left  => {pq} case/And pq | both => c.value(pq.left)  : Empty
| right => {pq} case/And pq | both => c.value(pq.right) : Empty

// ~p && ~q -> ~(p || q)
logic.demorgan2 :
  {~P : Type, ~Q : Type
  , case c : And(Not(P), Not(Q))
  } -> Not(Or(P,Q))
| both => {pq} case/Or pq
  | left => c.left(pq.value)
  | right => c.right(pq.value)
  : Empty



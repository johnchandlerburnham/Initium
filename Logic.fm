/* Logic.fm contains a variety of useful non-builtin types
 * and functions over those types
 *
 * John Burnham (john@sunshinecybernetics.com) fecit
 */

// ========================================================
// =                    Data Types                        =
// ========================================================

// The uninhabited type, initial object in the FORM category
T Empty

// The terminal object in the FORM category
T Unit
| unit

// Logical conjunction
T And {A : Type, B : Type}
| both {left : A, right : B}

// Logical disjunction
T Or {A : Type, B: Type}
| left  { value : A }
| right { value : B }

// If and only if: p <-> q
Iff : {A : Type, B : Type} -> Type
  And(A -> B, B -> A)

// Propositional equality
T Equal {A : Type, a : -A} (b : -A)
| refl (a)

// ========================================================
// =      Data Type Specific Utilities and Theorems       =
// ========================================================

// An initial object is one which has a morphism to any
// other object.

// From falsehood, everything follows
absurd : {e : Empty, ~P : Type} -> P
  case/Empty e
  : P

// A false proposition returns a falsehood
Not : {P : Type} -> Type
  {x : P} -> Empty

// A terminal object is one which has a morphism from any
// other object.

// There is a function from any type to Unit
to_Unit : {~A, x : A} -> Unit
  unit

// There is a function from Unit to any term
from_Unit : {~A, x : A, u : Unit} -> A
  x

// And
// ---------------------------------------------------------

and.left : {~A, ~B, case and : And(A, B)} -> A
| both => and.left

and.right : {~A, ~B, case and : And(A, B)} -> B
| both => and.right

// Iff
// ---------------------------------------------------------

//iff.Reflexive : {A : Type} -> Reflexive(Type, Iff)
  //{~A} both(~(A -> A), ~(A -> A), id(~A), id(~A))

//iff.Symmetric : {A : Type} -> Symmetric(Type,Iff)
  //{~A,~B,~f} case/And f
    //| both => both(~(B -> A),~(A -> B), f.right, f.left)
    //: Iff(B,A)

//iff.Transitive : Transitive(Type, Iff)
  //{~A,~B,~C,~f,~g} case/And f | both => case/And g | both =>
    //both(~(A -> C), ~(C -> A), {x} g.left(f.left(x)), {x} f.right(g.right(x)))
      //:Iff(A,C)
    //: Iff(A,C)

// Equal
// ---------------------------------------------------------

// Substitution of an equality
rewrite :
  { ~A : Type
  , ~a : -A
  , ~b : -A
  , e : Equal(A, a, b)
  , ~P : A -> Type
  , x : P(+a)
  } -> P(+b)
  case/Equal e
  | refl => x
  : P(+e.b)

// Symmetry of equality
sym : {~A : Type, ~a : -A, ~b : -A, e : Equal(A, a, b)} -> Equal(A, b, a)
  case/Equal e
  | refl => refl(~A, ~a)
  : Equal(A, e.b, a)

// Congruence of equality
cong :
  { ~A : Type
  , ~B : Type
  , ~a : -A
  , ~b : -A
  , ~f : -(A -> B)
  , e : Equal(A, a, b)
  } -> Equal(B, %(+f)(+a), %(+f)(+b))
  case/Equal e
  | refl => refl(~B, ~%(+f)(+a))
  : Equal(B, %(+f)(+a), %(+f)(+e.b))

// Transitivity of equality
trans :
  { ~A
  , ~a : -A
  , ~b : -A
  , ~c : -A
  , ab : Equal(A, a, b)
  , bc : Equal(A, b, c)
  } -> Equal(A, a, c)
  case/Equal bc
  | refl => ab
  : Equal(A, a, bc.b)




// A Semigroup is an associative Magma

import Algebra.Magma
import Algebra.Operation
import Data.Function

// ========================================================
// =                     Definition                       =
// ========================================================

T Semigroup {A : Type, s : -Setoid(A)}
| semigroup
  { f           : Op2(A)
  , associative : Associative(A,s,f)
  }

semigroup.f : {~A : Type , s : -Setoid(A) , case m : Semigroup(A,s)} -> Op2(A)
| semigroup => m.f

semigroup.associative : 
  { A : Type
  , s : -Setoid(A)
  , case m : Semigroup(A,s)
  } -> Associative(A,s,semigroup.f(~A,s,m))
| semigroup => m.associative

// ========================================================
// =                     Conversions                      =
// ========================================================

magma_to_semigroup :
  {~A : Type
  , s : -Setoid(A)
  , case m : Magma(A,s)
  , associative : Associative(A,s,magma.f(A,s,m))
  } -> Semigroup(A,s)
| magma => semigroup(~A,~s^,m.f,associative)

// All Semigroups are Magmas
semigroup_to_magma :
  {~A : Type
  , s : -Setoid(A)
  , m : Semigroup(A,s)
  } -> Magma(A,s)
  magma(~A,~s,semigroup.f(~A,s,m))

// ========================================================
// =                     Extensions                       =
// ========================================================

// A RegularSemigroup is one which has a regular inversion for every element
T RegularSemigroup {A : Type, s : -Setoid(A)}
| regular_semigroup
  { f           : Op2(A)
  , associative : Associative(A,s,f)
  , inversion   :
      case/Setoid +s as s | setoid =>
        {x : A} -> [y : A, s.R(y, f(y,f(x,y)))]
      : Type
  }

// An InverseSemigroup is one which has a unique inversion for every element
T InverseSemigroup {A : Type, s : -Setoid(A)}
| inverse_semigroup
  { f : Op2(A)
  , associative : Associative(A,s,f)
  , inversion :
      case/Setoid +s as s | setoid => 
        {x : A} -> [y : A, :s.R(x, f(x,f(y,x))), s.R(y, f(y,f(x,y)))]
      : Type
  }

T AbelianSemigroup {A : Type, s : -Setoid(A)}
| abelian_semigroup
  { f           : Op2(A)
  , e           : A
  , associative : Associative(A,s,f)
  , commutative : Commutative(A,s,f)
  }

T IdempotentSemigroup {A : Type, s : -Setoid(A)}
| idempotent_semigroup
  { f           : Op2(A)
  , e           : A
  , associative : Associative(A,s,f)
  , idempotent  : Idempotent(A,s,f)
  }

